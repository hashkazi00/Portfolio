<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/102/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.2/TweenMax.min.js"></script>

    <script>

        var scene = new THREE.Scene();

        var camera = new THREE.PerspectiveCamera(
            75,
            window.innerWidth / window.innerWidth,
            0.1,
            1000
        );

        camera.position.z = 5;

        var renderer = new THREE.WebGLRenderer({ antialias: true });

        renderer.setClearColor("#e5e5e5");

        renderer.setSize(window.innerWidth, window.innerHeight);

        document.body.appendChild(renderer.domElement);

        window.addEventListener('resize', () => {
            renderer.setSize(window.innerWidth, window.innerHeight);

            camera.aspect = window.innerWidth / window.innerHeight;

            camera.updateProjectionMatrix();
        })

        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();



        var geometry = new THREE.BoxGeometry(1, 1, 1);

        var material = new THREE.MeshLambertMaterial({ color: 0xFFCC00 });

        var mesh = new THREE.Mesh(geometry, material);

        // mesh.position.set(1, 1, 2);
        // mesh.rotation.set(45, 0, 0);

        scene.add(mesh);

        var light = new THREE.PointLight(0xffffff, 1, 500);

        light.position.set(10, 0, 25);

        scene.add(light);

        var render = function () {
            requestAnimationFrame(render);

            // mesh.rotation.x += 0.01;
            // mesh.rotation.y += 0.01;

            // mesh.scale.x += -0.01;

            renderer.render(scene, camera);
        }

        function onMouseMove(event) {
            event.preventDefault();

            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;

            mouse.y = (event.clientY / window.innerHeight) * 2 - 1;

            raycaster.setFromCamera(mouse, camera);

            var intersects = raycaster.intersectObjects(scene.children, true);

            for (var i = 0; i < intersects.length; i++) {
                this.tl = new TimelineMax();
                this.tl.to(intersects[i].object.scale, 1, { x: 2, ease: Expo.easOut });
                this.tl.to(intersects[i].object.scale, .5, { x: .5, ease: Expo.easOut });
                this.tl.to(intersects[i].object.position, .5, { x: 2, ease: Expo.easOut });
                this.tl.to(intersects[i].object.rotation, .5, { y: Math.PI * .5, ease: Expo.easOut }, "=-1.5");
            }
        }

        render();





        window.addEventListener('mousemove', onMouseMove);



    </script>